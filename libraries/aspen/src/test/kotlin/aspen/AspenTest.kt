package aspen

import aspen.examples.*
import io.damo.aspen.TestTree
import io.damo.aspen.TestTreeRunner
import io.damo.aspen.metatests.executeRunner
import org.assertj.core.api.Assertions.assertThat
import org.junit.Test
import kotlin.reflect.KClass

class AspenTest {

    @Test
    fun testControllerTestExample() {
        val listener = runTest(CompanyControllerTestExample::class)

        assertThat(listener.tests).containsExactly(
            "#create test(aspen.examples.CompanyControllerTestExample)",
            "#create repository creation error(aspen.examples.CompanyControllerTestExample)"
        )

        assertThat(listener.failingTests).containsExactly(
            "#create repository creation error(aspen.examples.CompanyControllerTestExample)"
        )
    }

    @Test
    fun testControllerTestExampleWithInit() {
        val listener = runTest(BusinessControllerTestExample::class)

        assertThat(listener.tests).containsExactly(
            "#create test(aspen.examples.BusinessControllerTestExample)",
            "#create repository creation error(aspen.examples.BusinessControllerTestExample)"
        )

        assertThat(listener.failingTests).containsExactly(
            "#create repository creation error(aspen.examples.BusinessControllerTestExample)"
        )
    }

    @Test
    fun testDomainModelTestExample() {
        val listener = runTest(PersonTestExample::class)

        assertThat(listener.tests).containsExactly(
            "#fullName test(aspen.examples.PersonTestExample)",
            "#fullName with a middle name(aspen.examples.PersonTestExample)",
            "#greeting test(aspen.examples.PersonTestExample)"
        )

        assertThat(listener.failingTests).containsExactly(
            "#fullName with a middle name(aspen.examples.PersonTestExample)"
        )
    }

    @Test
    fun testTopLevelTestTestExample() {
        val listener = runTest(RunnableTestExample::class)

        assertThat(listener.tests).containsExactly(
            "test(aspen.examples.RunnableTestExample)"
        )

        assertThat(listener.failingTests).isEmpty()
    }

    @Test
    fun testFocusedTestExample() {
        val listener = runTest(FocusedTestExample::class)

        assertThat(listener.tests).containsExactly(
            "#something focused(aspen.examples.FocusedTestExample)",
            "#somethingElse focused too(aspen.examples.FocusedTestExample)"
        )

        assertThat(listener.failingTests).isEmpty()
    }

    @Test
    fun testNestedTestExample() {
        val listener = runTest(NestedTestExample::class)

        assertThat(listener.tests).containsExactly(
            "something test(aspen.examples.NestedTestExample)",
            "nested something test(aspen.examples.NestedTestExample)",
            "nested something test(aspen.examples.NestedTestExample)",
            "nested something this test will fail in nested something(aspen.examples.NestedTestExample)",
            "nested something else test(aspen.examples.NestedTestExample)",
            "something else test(aspen.examples.NestedTestExample)",
            "something else this test will fail in something else(aspen.examples.NestedTestExample)"
        )

        assertThat(listener.failingTests).containsExactly(
            "nested something this test will fail in nested something(aspen.examples.NestedTestExample)",
            "something else this test will fail in something else(aspen.examples.NestedTestExample)"
        )
    }

    @Test
    fun testTableBasedTestExample() {
        val listener = runTest(ReservationTestExample::class)

        assertThat(listener.tests).containsExactly(
            "#amount - table based when status is OPEN(aspen.examples.ReservationTestExample)",
            "#amount - table based when status is STARTED(aspen.examples.ReservationTestExample)",
            "#amount - table based when status is BILLED(aspen.examples.ReservationTestExample)",
            "#amount - table based when status is PAID(aspen.examples.ReservationTestExample)",
            "#amount - map based when status is OPEN(aspen.examples.ReservationTestExample)",
            "#amount - map based when status is STARTED(aspen.examples.ReservationTestExample)",
            "#amount - map based when status is BILLED(aspen.examples.ReservationTestExample)",
            "#amount - map based when status is PAID(aspen.examples.ReservationTestExample)",
            "#amount - test data based when status is OPEN(aspen.examples.ReservationTestExample)",
            "#amount - test data based when status is STARTED(aspen.examples.ReservationTestExample)",
            "#amount - test data based when status is BILLED(aspen.examples.ReservationTestExample)",
            "#amount - test data based when status is PAID(aspen.examples.ReservationTestExample)"
        )

        assertThat(listener.failingTests).isEmpty()
    }

    @Test
    fun testExpectedExceptionTestExample() {
        val listener = runTest(ExceptionThrowingServiceTestExample::class)

        assertThat(listener.tests).containsExactly(
            "with correct class and message(aspen.examples.ExceptionThrowingServiceTestExample)",
            "with correct class, no message(aspen.examples.ExceptionThrowingServiceTestExample)",
            "with correct parent class(aspen.examples.ExceptionThrowingServiceTestExample)",
            "with correct message(aspen.examples.ExceptionThrowingServiceTestExample)",
            "with incorrect class(aspen.examples.ExceptionThrowingServiceTestExample)",
            "with incorrect message(aspen.examples.ExceptionThrowingServiceTestExample)"
        )

        assertThat(listener.failingTests).containsExactly(
            "with incorrect class(aspen.examples.ExceptionThrowingServiceTestExample)",
            "with incorrect message(aspen.examples.ExceptionThrowingServiceTestExample)"
        )
    }

    @Test
    fun testTestUsingTestRulesExample() {
        val listener = runTest(TestUsingTestRulesExample::class)

        assertThat(listener.tests).containsExactly(
            "test(aspen.examples.TestUsingTestRulesExample)"
        )

        assertThat(listener.failingTests).isEmpty()
    }
}

fun <T : TestTree> runTest(kClass: KClass<T>) = executeRunner(TestTreeRunner(kClass.java))
