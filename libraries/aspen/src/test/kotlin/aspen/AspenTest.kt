package aspen

import aspen.examples.*
import io.damo.aspen.TestTree
import io.damo.aspen.TestTreeRunner
import io.damo.aspen.metatests.executeRunner
import org.assertj.core.api.Assertions.assertThat
import org.junit.Test
import kotlin.reflect.KClass

class AspenTest {

    @Test
    fun testControllerTestExample() {
        val listener = runTest(CompanyControllerTestExample::class)

        assertThat(listener.tests).containsExactly(
            "unnamed test #1 (#create)",
            "repository creation error (#create)"
        )

        assertThat(listener.failingTests).containsExactly(
            "repository creation error (#create)"
        )
    }

    @Test
    fun testControllerTestExampleWithInit() {
        val listener = runTest(BusinessControllerTestExample::class)

        assertThat(listener.tests).containsExactly(
            "unnamed test #1 (#create)",
            "repository creation error (#create)"
        )

        assertThat(listener.failingTests).containsExactly(
            "repository creation error (#create)"
        )
    }

    @Test
    fun testDomainModelTestExample() {
        val listener = runTest(PersonTestExample::class)

        assertThat(listener.tests).containsExactly(
            "unnamed test #1 (#fullName)",
            "with a middle name (#fullName)",
            "unnamed test #2 (#greeting)"
        )

        assertThat(listener.failingTests).containsExactly(
            "with a middle name (#fullName)"
        )
    }

    @Test
    fun testTopLevelTestTestExample() {
        val listener = runTest(RunnableTestExample::class)

        assertThat(listener.tests).containsExactly(
            "unnamed test #1"
        )

        assertThat(listener.failingTests).isEmpty()
    }

    @Test
    fun testFocusedTestExample() {
        val listener = runTest(FocusedTestExample::class)

        assertThat(listener.tests).containsExactly(
            "focused (#something)",
            "focused too (#somethingElse)"
        )

        assertThat(listener.failingTests).isEmpty()
    }

    @Test
    fun testNestedTestExample() {
        val listener = runTest(NestedTestExample::class)

        assertThat(listener.tests).containsExactly(
            "unnamed test #1 (something)",
            "unnamed test #2 (nested something)",
            "unnamed test #3 (nested something)",
            "this test will fail in nested something (nested something)",
            "unnamed test #4 (nested something else)",
            "unnamed test #5 (something else)",
            "this test will fail in something else (something else)"
        )

        assertThat(listener.failingTests).containsExactly(
            "this test will fail in nested something (nested something)",
            "this test will fail in something else (something else)"
        )
    }

    @Test
    fun testTableBasedTestExample() {
        val listener = runTest(ReservationTestExample::class)

        assertThat(listener.tests).containsExactly(
            "when status is OPEN (#amount - table based)",
            "when status is STARTED (#amount - table based)",
            "when status is BILLED (#amount - table based)",
            "when status is PAID (#amount - table based)",
            "when status is OPEN (#amount - map based)",
            "when status is STARTED (#amount - map based)",
            "when status is BILLED (#amount - map based)",
            "when status is PAID (#amount - map based)",
            "when status is OPEN (#amount - test data based)",
            "when status is STARTED (#amount - test data based)",
            "when status is BILLED (#amount - test data based)",
            "when status is PAID (#amount - test data based)"
        )

        assertThat(listener.failingTests).isEmpty()
    }

    @Test
    fun testExpectedExceptionTestExample() {
        val listener = runTest(ExceptionThrowingServiceTestExample::class)

        assertThat(listener.tests).containsExactly(
            "with correct class and message",
            "with correct class, no message",
            "with correct parent class",
            "with correct message",
            "with incorrect class",
            "with incorrect message"
        )

        assertThat(listener.failingTests).containsExactly(
            "with incorrect class",
            "with incorrect message"
        )
    }
}

fun <T : TestTree> runTest(kClass: KClass<T>) = executeRunner(TestTreeRunner(kClass.java))
